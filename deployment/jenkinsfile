pipeline {
    agent any

    environment {
        SSH_CRED_ID = 'todo-auto-ssh'
        FRONTEND_REMOTE_PATH = '/usr/share/nginx/html/frontend'
        BACKEND_PATH = '/TODO-APP/backend'
        DB_MIGRATION_PATH = '/TODO-APP/init-db'
    }

    stages {
        stage('Checkout') {
            steps {
                echo "Checking out code from repository..."
                checkout scm
            }
        }

        stage('Validate Environment') {
            steps {
                withCredentials([
                    string(credentialsId: 'UAT-HOST-TODO', variable: 'UAT_HOST'),
                    string(credentialsId: 'UAT-USERNAME-TODO', variable: 'UAT_USER')
                ]) {
                    echo "Target Host: ${UAT_HOST}"
                    echo "Username: ${UAT_USER}"
                    echo "SSH Credential ID: ${SSH_CRED_ID}"
                    echo "Backend Path: ${BACKEND_PATH}"
                    echo "Frontend Path: ${FRONTEND_REMOTE_PATH}"
                    echo "DB Migration Path: ${DB_MIGRATION_PATH}"
                }
            }
        }

        stage('Test Connection') {
            steps {
                withCredentials([
                    string(credentialsId: 'UAT-HOST-TODO', variable: 'UAT_HOST'),
                    string(credentialsId: 'UAT-USERNAME-TODO', variable: 'UAT_USER')
                ]) {
                    sshagent(credentials: ["${env.SSH_CRED_ID}"]) {
                        sh """
                            ssh -o StrictHostKeyChecking=no ${UAT_USER}@${UAT_HOST} '
                                echo "SSH connection successful!"
                                hostname
                                whoami
                                pwd
                                date
                            '
                        """
                    }
                }
            }
        }

        stage('Deploy Backend') {
            steps {
                withCredentials([
                    string(credentialsId: 'UAT-HOST-TODO', variable: 'UAT_HOST'),
                    string(credentialsId: 'UAT-USERNAME-TODO', variable: 'UAT_USER')
                ]) {
                    sshagent(credentials: ["${env.SSH_CRED_ID}"]) {
                        sh """
                            ssh -o StrictHostKeyChecking=no ${UAT_USER}@${UAT_HOST} '
                                set -e
                                cd ${BACKEND_PATH} || (echo "Backend directory not found" && exit 1)
                                git remote set-url origin https://github.com/edres-software/TODO-APP.git
                                git reset --hard
                                git clean -fd
                                git pull origin main
                                npm install
                                if pm2 list | grep -q "backend-app"; then
                                    pm2 restart backend-app
                                else
                                    pm2 start app.js --name backend-app
                                fi
                            '
                        """
                    }
                }
            }
        }

        stage('Run DB Migration') {
            steps {
                withCredentials([
                    string(credentialsId: 'UAT-HOST-TODO', variable: 'UAT_HOST'),
                    string(credentialsId: 'UAT-USERNAME-TODO', variable: 'UAT_USER')
                ]) {
                    sshagent(credentials: ["${env.SSH_CRED_ID}"]) {
                        sh """
                            ssh -o StrictHostKeyChecking=no ${UAT_USER}@${UAT_HOST} '
                                set -e
                                cd ${DB_MIGRATION_PATH} || (echo "Migration directory not found" && exit 1)
                                chmod +x run_migrations.sh
                                ./run_migrations.sh
                            '
                        """
                    }
                }
            }
        }

        stage('Deploy Frontend') {
            steps {
                withCredentials([
                    string(credentialsId: 'UAT-HOST-TODO', variable: 'UAT_HOST'),
                    string(credentialsId: 'UAT-USERNAME-TODO', variable: 'UAT_USER')
                ]) {
                    sshagent(credentials: ["${env.SSH_CRED_ID}"]) {
                        sh """
                            ssh -o StrictHostKeyChecking=no ${UAT_USER}@${UAT_HOST} 'rm -rf ${FRONTEND_REMOTE_PATH}/*'
                            scp -r -o StrictHostKeyChecking=no frontend/* ${UAT_USER}@${UAT_HOST}:${FRONTEND_REMOTE_PATH}/
                            ssh -o StrictHostKeyChecking=no ${UAT_USER}@${UAT_HOST} 'systemctl reload nginx'
                        """
                    }
                }
            }
        }

        stage('Health Check') {
            steps {
                withCredentials([
                    string(credentialsId: 'UAT-HOST-TODO', variable: 'UAT_HOST'),
                    string(credentialsId: 'UAT-USERNAME-TODO', variable: 'UAT_USER')
                ]) {
                    sshagent(credentials: ["${env.SSH_CRED_ID}"]) {
                        sh """
                            ssh -o StrictHostKeyChecking=no ${UAT_USER}@${UAT_HOST} '
                                pm2 status
                                systemctl status nginx --no-pager
                                curl -f http://localhost:3000/health || echo "Backend health check failed"
                                ls -la ${FRONTEND_REMOTE_PATH}
                            '
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo "üèÅ Deployment pipeline completed"
            echo "Pipeline execution time: \${currentBuild.durationString}"
        }
        success {
            echo "‚úÖ Deployment succeeded!"
        }
        failure {
            echo "‚ùå Deployment failed! Check logs for details."
        }
    }
}
