pipeline {
    agent any

    environment {
        UAT_HOST = credentials('UAT-HOST-TODO')      // Your server IP or hostname
        UAT_USER = credentials('UAT-USERNAME-TODO')  // SSH user on the server
        SSH_CRED_ID = 'todo-auto-ssh'                 // Jenkins SSH credential ID
        BACKEND_PATH = '/TODO-APP/backend'
        FRONTEND_PATH = '/usr/share/nginx/html/frontend'
        REPO_URL = 'https://github.com/edres-software/TODO-APP.git'
    }

        stage('Validate Environment') {
            steps {
                echo "Target Host: ${UAT_HOST}"
                echo "Username: ${UAT_USER}"
                echo "Backend Path: ${BACKEND_PATH}"
                echo "Frontend Path: ${FRONTEND_PATH}"
            }
        }

        stage('Test SSH Connection') {
            steps {
                sshagent(credentials: [SSH_CRED_ID]) {
                    sh """
                    ssh -o StrictHostKeyChecking=no ${UAT_USER}@${UAT_HOST} '
                        echo "SSH connection successful!"
                        hostname
                        whoami
                        pwd
                        date
                    '
                    """
                }
            }
        }

        stage('Deploy Backend') {
            steps {
                sshagent(credentials: [SSH_CRED_ID]) {
                    sh """
                    ssh -o StrictHostKeyChecking=no ${UAT_USER}@${UAT_HOST} '
                        set -e
                        cd ${BACKEND_PATH} || (echo "Backend directory not found" && exit 1)
                        git remote set-url origin ${REPO_URL}
                        git reset --hard
                        git clean -fd
                        git pull origin main
                        npm install
                        if pm2 list | grep -q "todo-backend"; then
                            pm2 restart todo-backend
                        else
                            pm2 start server.js --name todo-backend
                        fi
                    '
                    """
                }
            }
        }

        stage('Deploy Frontend') {
            steps {
                sshagent(credentials: [SSH_CRED_ID]) {
                    sh """
                    ssh -o StrictHostKeyChecking=no ${UAT_USER}@${UAT_HOST} '
                        set -e
                        rm -rf ${FRONTEND_PATH}/*
                        cp -r /TODO-APP/frontend/* ${FRONTEND_PATH}/
                    '
                    """
                }
            }
        }

        stage('Health Check') {
            steps {
                sshagent(credentials: [SSH_CRED_ID]) {
                    sh """
                    ssh -o StrictHostKeyChecking=no ${UAT_USER}@${UAT_HOST} '
                        curl -f http://localhost:3000/health || (echo "Health check failed!" && exit 1)
                    '
                    """
                }
            }
        }
    }

    post {
        success {
            echo "✅ Deployment succeeded!"
        }
        failure {
            echo "❌ Deployment failed! Check logs for details."
        }
    }
}
