pipeline {
    agent any
    
    environment {
        SSH_CRED_ID = 'todo-auto-ssh'
        FRONTEND_REMOTE_PATH = '/usr/share/nginx/html/frontend'
        BACKEND_PATH = '/TODO-APP/backend'
        DB_MIGRATION_PATH = '/TODO-APP/init-db'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo "Checking out code from repository..."
                checkout scm
            }
        }
        
        stage('Validate Environment') {
            steps {
                withCredentials([
                    string(credentialsId: 'UAT-HOST-TODO', variable: 'UAT_HOST'),
                    string(credentialsId: 'UAT-USERNAME-TODO', variable: 'UAT_USER')
                ]) {
                    echo "Validating deployment environment..."
                    sh """
                        echo "Target Host: ${UAT_HOST}"
                        echo "Username: ${UAT_USER}"
                        echo "SSH Credential ID: ${SSH_CRED_ID}"
                        echo "Backend Path: ${BACKEND_PATH}"
                        echo "Frontend Path: ${FRONTEND_REMOTE_PATH}"
                        echo "DB Migration Path: ${DB_MIGRATION_PATH}"
                    """
                }
            }
        }
        
        stage('Test Connection') {
            steps {
                withCredentials([
                    string(credentialsId: 'UAT-HOST-TODO', variable: 'UAT_HOST'),
                    string(credentialsId: 'UAT-USERNAME-TODO', variable: 'UAT_USER')
                ]) {
                    sshagent(credentials: ["${env.SSH_CRED_ID}"]) {
                        sh """
                            echo "Testing SSH connection to ${UAT_HOST}..."
                            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=10 ${UAT_USER}@${UAT_HOST} '
                                echo "SSH connection successful!"
                                echo "Server hostname: \$(hostname)"
                                echo "Current user: \$(whoami)"
                                echo "Current directory: \$(pwd)"
                                echo "Server time: \$(date)"
                            '
                        """
                    }
                }
            }
        }
        
        stage('Deploy Backend') {
            steps {
                withCredentials([
                    string(credentialsId: 'UAT-HOST-TODO', variable: 'UAT_HOST'),
                    string(credentialsId: 'UAT-USERNAME-TODO', variable: 'UAT_USER')
                ]) {
                    sshagent(credentials: ["${env.SSH_CRED_ID}"]) {
                        sh """
                            echo "üöÄ Starting backend deployment..."
                            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=10 ${UAT_USER}@${UAT_HOST} '
                                set -e
                                echo "üìÅ Navigating to backend directory..."
                                cd ${BACKEND_PATH} || (echo "‚ùå Backend directory not found: ${BACKEND_PATH}" && exit 1)
                                
                                echo "üîÑ Pulling latest code from repository..."
                                git pull origin main || (echo "‚ùå Git pull failed" && exit 1)
                                
                                echo "üì¶ Installing/updating dependencies..."
                                npm install || (echo "‚ùå NPM install failed" && exit 1)
                                
                                echo "üîß Managing PM2 process..."
                                if pm2 list | grep -q "backend-app"; then
                                    echo "Restarting existing PM2 process..."
                                    pm2 restart backend-app
                                else
                                    echo "Starting new PM2 process..."
                                    pm2 start app.js --name backend-app
                                fi
                                
                                echo "‚úÖ Backend deployment completed successfully!"
                                pm2 status backend-app
                            '
                        """
                    }
                }
            }
        }
        
        stage('Run DB Migration') {
            steps {
                withCredentials([
                    string(credentialsId: 'UAT-HOST-TODO', variable: 'UAT_HOST'),
                    string(credentialsId: 'UAT-USERNAME-TODO', variable: 'UAT_USER')
                ]) {
                    sshagent(credentials: ["${env.SSH_CRED_ID}"]) {
                        sh """
                            echo "üóÑÔ∏è Starting database migration..."
                            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=10 ${UAT_USER}@${UAT_HOST} '
                                set -e
                                echo "üìÅ Navigating to migration directory..."
                                cd ${DB_MIGRATION_PATH} || (echo "‚ùå Migration directory not found: ${DB_MIGRATION_PATH}" && exit 1)
                                
                                echo "üîß Making migration script executable..."
                                chmod +x run_migrations.sh
                                
                                echo "üöÄ Running database migrations..."
                                ./run_migrations.sh || (echo "‚ùå Database migration failed" && exit 1)
                                
                                echo "‚úÖ Database migration completed successfully!"
                            '
                        """
                    }
                }
            }
        }
        
        stage('Deploy Frontend') {
            steps {
                withCredentials([
                    string(credentialsId: 'UAT-HOST-TODO', variable: 'UAT_HOST'),
                    string(credentialsId: 'UAT-USERNAME-TODO', variable: 'UAT_USER')
                ]) {
                    sshagent(credentials: ["${env.SSH_CRED_ID}"]) {
                        sh """
                            echo "üåê Starting frontend deployment..."
                            
                            echo "üóëÔ∏è Cleaning old frontend files..."
                            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=10 ${UAT_USER}@${UAT_HOST} "
                                rm -rf ${FRONTEND_REMOTE_PATH}/*
                                echo 'Old frontend files removed'
                            "
                            
                            echo "üìÅ Checking if frontend directory exists in workspace..."
                            if [ -d "frontend" ]; then
                                echo "‚úÖ Frontend directory found"
                                ls -la frontend/
                            else
                                echo "‚ùå Frontend directory not found in workspace"
                                echo "Available files/directories:"
                                ls -la
                                exit 1
                            fi
                            
                            echo "üì§ Copying new frontend files..."
                            scp -r -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null frontend/* ${UAT_USER}@${UAT_HOST}:${FRONTEND_REMOTE_PATH}/
                            
                            echo "üîÑ Reloading Nginx..."
                            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=10 ${UAT_USER}@${UAT_HOST} "
                                systemctl reload nginx || (echo '‚ùå Nginx reload failed' && exit 1)
                                echo '‚úÖ Nginx reloaded successfully'
                            "
                            
                            echo "‚úÖ Frontend deployment completed successfully!"
                        """
                    }
                }
            }
        }
        
        stage('Health Check') {
            steps {
                withCredentials([
                    string(credentialsId: 'UAT-HOST-TODO', variable: 'UAT_HOST'),
                    string(credentialsId: 'UAT-USERNAME-TODO', variable: 'UAT_USER')
                ]) {
                    sshagent(credentials: ["${env.SSH_CRED_ID}"]) {
                        sh """
                            echo "üîç Performing post-deployment health checks..."
                            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=10 ${UAT_USER}@${UAT_HOST} '
                                echo "Checking PM2 processes..."
                                pm2 status
                                
                                echo "Checking Nginx status..."
                                systemctl status nginx --no-pager
                                
                                echo "Checking if backend is responding..."
                                curl -f http://localhost:3000/health || echo "Backend health check failed"
                                
                                echo "Checking frontend files..."
                                ls -la ${FRONTEND_REMOTE_PATH}
                                
                                echo "‚úÖ Health check completed!"
                            '
                        """
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo "üèÅ Deployment pipeline completed"
            echo "Pipeline execution time: \${currentBuild.durationString}"
        }
        success {
            echo "‚úÖ All deployment stages completed successfully!"
            echo "üéâ Your TODO application has been deployed to UAT environment"
        }
        failure {
            echo "‚ùå Deployment pipeline failed!"
            echo "üîç Please check the logs above for error details"
            echo "üí° Common issues to check:"
            echo "   - SSH key authentication"
            echo "   - Server accessibility"
            echo "   - Directory permissions"
            echo "   - Service configurations"
        }
        unstable {
            echo "‚ö†Ô∏è Pipeline completed with warnings"
        }
    }
}